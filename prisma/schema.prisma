generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "mongodb"
  url       = env("DATABASE_URL")
}

model Profile {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  clerkId      String     @unique
  firstName    String
  lastName     String
  username     String
  email        String
  profileImage String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  bookings     Booking[]
  favorites    Favorite[]
  properties   Property[]
  reviews      Review[]
}

model Property {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  tagline      String
  category     String
  image        String
  country      String
  description  String
  price        Int
  guests       Int
  bedrooms     Int
  beds         Int
  baths        Int
  amenities    String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  profileId    String
  bookings     Booking[]
  favorites    Favorite[]
  profile      Profile    @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  reviews      Review[]
}

model Favorite {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  profileId    String
  propertyId   String     @db.ObjectId
  profile      Profile    @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  property     Property   @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Review {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  profileId    String
  propertyId   String     @db.ObjectId
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  profile      Profile    @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  property     Property   @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Booking {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  profileId     String
  propertyId    String     @db.ObjectId
  orderTotal    Int
  totalNights   Int
  checkIn       DateTime
  checkOut      DateTime
  paymentStatus Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  profile       Profile    @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  property      Property   @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}
